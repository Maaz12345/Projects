/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * UTM_LOGIC.java
 *
 * Created on Apr 14, 2015, 3:20:19 AM
 */

package utm_gui;

import java.io.File;
//import java.io.FileNotFoundException;
import java.util.Scanner;
//import java.util.logging.Level;
//import java.util.logging.Logger;

/**
 *
 * @author Maaz-PC
 */
public class UTM_LOGIC extends javax.swing.JFrame {
Scanner a;
Machine m1=new Machine();
    /** Creates new form NewJFrame */
    public UTM_LOGIC() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        buttonGroup4 = new javax.swing.ButtonGroup();
        buttonGroup5 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        sampleInput = new javax.swing.JTextField();
        tapeInput = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 0, 204));
        setForeground(new java.awt.Color(102, 153, 0));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(153, 153, 153));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Universal Turing Machine");

        sampleInput.setEditable(false);
        sampleInput.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        sampleInput.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        sampleInput.setText("Sample Input");
        sampleInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sampleInputActionPerformed(evt);
            }
        });

        tapeInput.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tapeInput.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        tapeInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tapeInputActionPerformed(evt);
            }
        });

        jButton1.setText("COMPUTE");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("EXIT");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jComboBox1.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Selected Turing Machine", "AnBn", "Binary Addition", "Binary Subtraction", "Binary 2n", "unary-multiplication", "unary-incrementer", "unary-addition", "flip-start-end-with-0", "Even-Palindrome", "Binary n/2", "Number/Power of 2" }));
        jComboBox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox1ItemStateChanged(evt);
            }
        });
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });
        jComboBox1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jComboBox1KeyPressed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Step 1:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("Step 3:");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setText("Step 2:");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setText("Step 4:");

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Enter The Tape Content As Described In Ex.");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(sampleInput, javax.swing.GroupLayout.PREFERRED_SIZE, 816, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(80, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(26, 26, 26)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(222, 222, 222))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(372, 372, 372))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(356, 356, 356)
                        .addComponent(tapeInput, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(325, 325, 325)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(275, 275, 275)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 341, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sampleInput, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(39, 39, 39)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tapeInput, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(183, 183, 183))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void sampleInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sampleInputActionPerformed
       
        sampleInput.setEditable(false);
    }//GEN-LAST:event_sampleInputActionPerformed

    private void jComboBox1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jComboBox1KeyPressed
       

        Object AnBn = jComboBox1.getSelectedItem();
        String Text = "";
        if (AnBn != null) {
            Text = AnBn.toString();
       }
        if (Text == "AnBn"){
            this.sampleInput.setText("maaz");
           

      }
    }//GEN-LAST:event_jComboBox1KeyPressed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        
         

        Object AnBn = jComboBox1.getSelectedItem();
        String Text = "";
        if (AnBn != null) {
            Text = AnBn.toString();
        }
        if (Text == "AnBn"){
            this.sampleInput.setText("Enter the input (ex:: aabb)");
        } 
      else if ("Binary Addition" == Text)
               this.sampleInput.setText("Enter the input (ex:: 1001+1111)");         
      else   if ("Binary Subtraction"==Text)
            this.sampleInput.setText("Enter the input (ex:: 1111-1001)SUBTRACTION RULE: GREATER NUMBER-LESS NUMBER");
      else   if (Text == "Binary 2n")
            this.sampleInput.setText("Enter the input (ex:: 1011)");
      else   if (Text == "unary-multiplication")
            this.sampleInput.setText("Enter the input (Only 1's are allowed in unary )(ex:: 111*11)");
      else   if (Text == "unary-incrementer")
            this.sampleInput.setText("Enter the input (Only 1's are allowed in unary )(ex:: 111)");
      else  if (Text == "unary-addition")
            this.sampleInput.setText("Enter the input (ex:: 11+111)");
      else   if (Text == "flip-start-end-with-0")
            this.sampleInput.setText("Enter the input (ex:: 0110)*valid strings:0111110,010*valid output:1000001,101");
      else   if (Text == "Even-Palindrome")
            this.sampleInput.setText("Enter the input (ex:: abba)");
      else   if (Text == "Binary n/2")
            this.sampleInput.setText("Enter the input(ex::1010)  *Number should be even");
      else   if (Text == "Number/Power of 2")
            this.sampleInput.setText("Enter the input(ex::1000/11=8/2^3->>>Number^Power of 2 *Number should be even");
      
        
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void tapeInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tapeInputActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_tapeInputActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        

         String newline="\n";
         String tab="\t";
        Object AnBn = jComboBox1.getSelectedItem();
        String Text = "";
        String S=null;
        if (AnBn != null) 
        {
            Text = AnBn.toString();
        }
      if (Text == "AnBn")
            S="anbn.txt";
   
      else if ("Binary Addition" == Text)
            S="Binary Addition.txt";
      else   if ("Binary Subtraction"==Text)
            S="Binary Subtraction.txt";
      else   if (Text == "Binary 2n")
            S="Binary 2n.txt";
      else   if (Text == "unary-multiplication")
            S="unary-multiplication.txt";
      else   if (Text == "unary-incrementer")
            S="unary-incrementer.txt";
      else  if (Text == "unary-addition")
            S="unary-addition.txt";
      else   if (Text == "flip-start-end-with-0")
            S="flip-start-end-with-0.txt";
      else   if (Text == "Even-Palindrome")
            S="Even-Palindrome.txt";
      else   if (Text == "Binary n/2")
            S="Binary n.txt";
      else   if (Text == "Number/Power of 2")
          S="Binary ndividedby2pown.txt";
        
            String input = tapeInput.getText();
            if (input != null) {
              try
              {
                  a = new Scanner(new File(S));
                 
              } catch (Exception ex)
              {
                    System.out.println("could not find file /n");
              }
            }
        
         int[] PSN=new int [2];
     PSN[0]=49;
     String [][]arr=new String [20][20];
     arr=this.stringbreak();
     int m=0;
     S=null ;
     S=this.tapeInput.getText();
      S= S.toLowerCase();
      char inputtape[];
       inputtape=S.toCharArray();
       int []decode=new int [30];
       decode=decodinginputtape(inputtape);
       int head= transitions(decode);

       int[] transition=new int [11];
       int move=0,num=0,selection=0;
      
     m1.setVisible(true);


       do{
          m1.jTextArea1.append(newline+"HEAD POINTER ----->>>> "+(char)decode[head]+newline);
        transition=gettransition(decode[head],PSN[0], arr);
        num++;
        PSN=updatePSN(transition);
        decode[head]=PSN[1];
        move=ConChar(transition);
        if (move==1)
          head++;
        if (move==0)
          head--;
     //System.out.println(""+decode[head]);
     char g=(char)PSN[1];

            m1.jTextArea1.append(newline);
        for (int i=0;i<30;i++)
        {
            m1.jTextArea1.append("|"+(char)decode[i]);
        }
        m1.jTextArea1.append(newline);

     if (g=='h')
         break;
       }while (move!=2 || decode[head]!=95);

        if (move==2 && decode[head+1]==95)
        {
        head++;
        m1.jTextArea1.append(newline+tab+tab+tab+tab+"Accepted");
        }

        else
        m1.jTextArea1.append(newline+tab+tab+tab+"Rejected");
        m1.jTextArea1.append(newline+newline+tab+tab+"Decoded Form Of Input Tape is "+newline);
        m1.jTextArea1.append(tab+tab+newline);
        for (int i=0;i<30;i++)
        {
            m1.jTextArea1.append("|"+(char)decode[i]);
        }
        m1.jTextArea1.append(newline);

   m1.jTextArea1.append("TOTAL NUMBER OF TRANSITIONS ARE :: "+num);


    // if (selection==9||selection==4)
     //{
       ////////////////////////////////////////////////////////////////////////////////////
        //////Main END//////
   ////////////////////////////////////////////////////////////////////////////
     
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jComboBox1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox1ItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ItemStateChanged
   ////////////////////////////////////////////////////////
        //////Functions Started//////
   ////////////////////////////////////////////////////////
    public String[][]  stringbreak()
   {
          String c;
          String Arr[][]=new String [20][20];
          int i=0,b=0,pos=0,d=0;

          while(a.hasNext())
         {
            c=a.next();
            pos=c.indexOf(",");
            String state=c.substring(1, pos);
            b=Integer.valueOf(state);
            if(d!=b)
                i=0;
            Arr[b][i]=c;
            i++;
            d=b;
         }
         return Arr;
     }
 int[] decodinginputtape(char  []arr)
     {
     String newline="\n";
         String tab="\t";
        char Blank='_';
        int c=(int) Blank;
        int i=0;
       int decodedarray[]=new int [30];
       for ( i=0;i<30/2;i++)
       {
           decodedarray[i]=c;
       }
            int j=i;
       for ( i=0;i<arr.length;i++)
       {

        c=(int)arr[i];
        decodedarray[j]=c;
        j++;
       }
       for ( i=j;i<30;i++)
       {
        c=(int) Blank;
        decodedarray[i]=c;
       }
       m1.jTextArea1.append(tab+tab+tab+tab+tab+"Input Tape is "+newline);
        m1.jTextArea1.append(newline+tab+tab);
        for ( i=0;i<30;i++)
        {
        char d=(char)decodedarray[i];
        m1.jTextArea1.append("|"+d);
        }
        m1.jTextArea1.append(newline+newline+tab+tab+tab+tab+"Decoded Form Of Input Tape is "+newline);
        m1.jTextArea1.append(newline+tab);
        for ( i=0;i<30;i++)
            m1.jTextArea1.append("|"+decodedarray[i]);
            m1.jTextArea1.append(newline);
            return decodedarray ;
     }
 int  transitions(int []decodedarr)
     {
            int i=0,j=0;
            int head=0,PSN=1;
       for (i=0;i<decodedarr.length;i++)
       {
           if (decodedarr[i]!=95)
           {
            head=i-1;
            break;
           }
       }
       return head;
     }
 int []gettransition(int inputhead,int PSN,String TA[][])
     {
        int[] trans=new int [7];
        char c[];
        int j=0,flag=0;
        PSN=PSN-48;
        j=0;
        while (TA[PSN][j]!=null)
        {
            int k=0,i=1;
            c=TA[PSN][j].toCharArray();
            trans[k]=(int)c[0];

       for (i=1;i<(c.length);i++)
       {
            k++;
            trans[k]=(int)c[i];
             i++;
       }
       k++;
       trans[k]=(int)c[c.length-1];
       if (trans[1]-48==PSN && trans[2]==inputhead)
       {
            flag=1;
            break;
       }
       else
            flag=0;
            j++;
        }
        m1.jTextArea1.append("Transitions Form {CurrentState,ReadSymbol,WriteSymbol,HeadMovement,NextState}----->>>> ");
          m1.jTextArea1.append(""+(char)trans[0]);
       for ( int p=1;p<trans.length-1;p++)
        {
            m1.jTextArea1.append(""+(char)trans[p]+",");

        }
          String newline="\n";
         String tab="\b";
       m1.jTextArea1.append(tab);
       m1.jTextArea1.append(""+(char)trans[trans.length-1]);
       m1.jTextArea1.append(newline);
return trans;
     }


     int ConChar(int []arr)
     {
     if (arr[4]==82)
       return 1;
     if (arr[4]==76)
       return 0;
     else
       return 2;
     }
     int []updatePSN(int []arr)
     {
       int []PSN=new int [2];
       PSN[0]=arr[5];
       PSN[1]=arr[3];
       return PSN;
     }
    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UTM_LOGIC().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.ButtonGroup buttonGroup4;
    private javax.swing.ButtonGroup buttonGroup5;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JTextField sampleInput;
    private javax.swing.JTextField tapeInput;
    // End of variables declaration//GEN-END:variables

}
